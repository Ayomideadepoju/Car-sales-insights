# Car Sales Guided Lookup (Dataset-driven)
# =====================================

import pandas as pd
import random
from IPython.display import display, Markdown

# Load dataset
df = pd.read_csv("car_sales_data.csv")

# Normalize columns
df['Manufacturer'] = df['Manufacturer'].astype(str).str.strip()
df['Model'] = df['Model'].astype(str).str.strip()
df['Fuel type'] = df['Fuel type'].astype(str).str.strip()
df['Year of manufacture'] = pd.to_numeric(df['Year of manufacture'], errors='coerce')
df['Mileage'] = pd.to_numeric(df['Mileage'], errors='coerce')
df['Price'] = pd.to_numeric(df['Price'], errors='coerce')

def summarize_selection(data, manu, model, year, fuel, user="Friend"):
    count = len(data)
    avg_price = data['Price'].mean()
    min_price = data['Price'].min()
    max_price = data['Price'].max()
    avg_mileage = data['Mileage'].mean()
    min_mileage = data['Mileage'].min()
    max_mileage = data['Mileage'].max()
    fuel_dist = data['Fuel type'].value_counts().to_dict()
    market_avg = df['Price'].mean()
    better_value = "Below market average" if avg_price < market_avg else "Above market average"

    md = f"""
#  Hello {user}!
Here’s the info for your selection:

###  Selection
- Manufacturer: {manu}
- Model: {model}
- Year: {year}
- Fuel: {fuel}

### Insights
- Matches found: **{count}**
- Price range: **{min_price:,.0f} – {max_price:,.0f}**
- Average price: **{avg_price:,.0f}**
- Mileage range: **{min_mileage:,.0f} – {max_mileage:,.0f}**
- Average mileage: **{avg_mileage:,.0f}**
- Fuel distribution: **{fuel_dist}**
- Market comparison: **{better_value}**

###  Recommendation
{random.choice([
    "This looks like a solid choice. Check maintenance history before buying.",
    "Good balance between price and mileage — worth considering.",
    "If the mileage is higher than average, negotiate for a better deal."
])}
"""
    display(Markdown(md))

# ---- Interactive guided loop ----
print(" Welcome to the Car Sales Explorer!")
user = input("What's your name? ").strip() or "Friend"

while True:
    # Step 1: Manufacturer
    manu_options = sorted(df['Manufacturer'].unique())
    print("\nAvailable Manufacturers:")
    print(", ".join(manu_options))
    manu = input("Choose a Manufacturer: ").strip()
    if manu not in manu_options:
        print(" Invalid choice. Please pick from the list.")
        continue

    # Step 2: Model
    model_options = sorted(df[df['Manufacturer'] == manu]['Model'].unique())
    print(f"\nAvailable Models for {manu}:")
    print(", ".join(model_options))
    model = input("Choose a Model: ").strip()
    if model not in model_options:
        print(" Invalid choice. Please pick from the list.")
        continue

    # Step 3: Year
    year_options = sorted(df[(df['Manufacturer'] == manu) & (df['Model'] == model)]['Year of manufacture'].dropna().unique())
    print(f"\nAvailable Years for {manu} {model}:")
    print(", ".join(str(y) for y in year_options))
    try:
        year = int(input("Choose a Year: ").strip())
    except:
        print(" Invalid year. Try again.")
        continue
    if year not in year_options:
        print(" Invalid choice. Please pick from the list.")
        continue

    # Step 4: Fuel
    fuel_options = sorted(df[(df['Manufacturer'] == manu) & (df['Model'] == model) & (df['Year of manufacture'] == year)]['Fuel type'].unique())
    print(f"\nAvailable Fuel types for {manu} {model} {year}:")
    print(", ".join(fuel_options))
    fuel = input("Choose a Fuel type: ").strip()
    if fuel not in fuel_options:
        print("Invalid choice. Please pick from the list.")
        continue

    # Final filter
    selection = df[
        (df['Manufacturer'] == manu) &
        (df['Model'] == model) &
        (df['Year of manufacture'] == year) &
        (df['Fuel type'] == fuel)
    ]

    summarize_selection(selection, manu, model, year, fuel, user=user)

    again = input("\nWould you like to explore another car? (yes/no): ").strip().lower()
    if again != "yes":
        print(f"\nThanks for exploring, {user}! Goodbye ")
        break

